from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import requests
from openai import OpenAI
import os
from dotenv import load_dotenv
load_dotenv()


client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")


app = FastAPI()

# instrucción del sistema.
SYSTEM_PROMPT = '''Eres un chatbot en español en WhatsApp para una empresa privada de desarrollo de software con el nombre {'nombre_de_empresa'}. Todas tus respuestas deben estar en el idioma del usuario o en el idioma especificado por el usuario. Responde únicamente a mensajes relacionados con la empresa {'nombre_de_empresa'}, indicando la informacion solo de la pagina web oficial de la empresa: {'url'}
No se permite ningún lenguaje grosero o ilegal, ni del usuario ni del chatbot.
Para mensajes no relacionados con la empresa {'nombre_de_empresa'} o sus servicios, mostrar: Estimado usuario, este es el chatbot de {nombre_de_empresa}. Si deseas recibir información sobre los contactos, el horario de atención o los servicios de la empresa, por favor, indícalo en tu mensaje.
Para mensajes con lenguaje grosero o ilegal, mostrar: De acuerdo con la política de la empresa, cualquier lenguaje grosero o ilegal está totalmente prohibido.'''


@app.get("/webhook")
async def verify_webhook(request: Request):
    params = dict(request.query_params)
    if params.get("hub.mode") == "subscribe" and params.get("hub.verify_token") == VERIFY_TOKEN:
        return JSONResponse(content=int(params.get("hub.challenge")))
    return JSONResponse(status_code=403, content={"error": "Verification failed"})

@app.post("/webhook")
async def receive_whatsapp_message(request: Request):
    body = await request.json()
    print("Получено:", body)

    try:
        messages = body["entry"][0]["changes"][0]["value"].get("messages")
        if messages:
            msg = messages[0]
            from_number = msg["from"]
            msg_type = msg['type']

            if msg_type == "text":
                text = msg["text"]["body"]
                reply_text = generate_chatgpt_reply(text)
                send_whatsapp_message(from_number, text=reply_text)

            else:
                reply_text = f"tipo de mensaje '{msg_type}' aún no compatible."
                send_whatsapp_message(from_number, reply_text)

    except Exception as e:
        print("Error:", e)

    return {"status": "ok"}

def generate_chatgpt_reply(user_message: str) -> str:
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            temperature=0.2
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print('Error al acceder a la IA', e)
        return "Error al acceder a la IA. Inténtalo más tarde."


def send_whatsapp_message(to_number: str, text: str):

    url = f"https://graph.facebook.com/v18.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to_number,
        "type": "text",
        "text": {"body": text}
    }

    response = requests.post(url, json=payload, headers=headers)
    print("Ответ от WhatsApp API:", response.json())











